name: Comprehensive CI/CD Pipeline with Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
    - name: Run linter
      run: npm run lint
    - name: Run Prettier check
      run: npm run prettier:check

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
    - name: Run unit tests
      run: npm run test:unit
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3

  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
    - name: Run integration tests
      run: npm run test:integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres

  build:
    needs: [code-quality, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
    - name: Build application
      run: npm run build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run SAST
      uses: github/codeql-action/analyze@v2
    - name: Run dependency scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
    - name: Deploy to Staging
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku container:login
        heroku container:push web --app your-staging-app
        heroku container:release web --app your-staging-app

  pentest-staging:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - name: Run AI-Driven API Pentesting on Staging
      env:
        PENTEST_API_KEY: ${{ secrets.PENTEST_API_KEY }}
      run: |
        curl -X POST "https://api.aipentest.com/v1/scan" \
          -H "Authorization: Bearer $PENTEST_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "target_url": "https://your-staging-app.herokuapp.com",
            "scan_type": "full",
            "callback_url": "https://your-webhook-endpoint.com/pentest-results"
          }'
    - name: Wait for Pentest Results
      run: |
        # Implement waiting logic here
        sleep 300
    - name: Check Pentest Results
      run: |
        # Implement result checking logic here
        echo "Checking pentest results..."

  e2e-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Cypress
      run: npm install cypress
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CYPRESS_BASE_URL: https://your-staging-app.herokuapp.com
        
  load-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    - name: Run load tests
      run: k6 run load-tests.js
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

  deploy-production:
    needs: [pentest-staging, e2e-tests, load-tests]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
    - name: Deploy to Production
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku container:login
        heroku container:push web --app your-production-app
        heroku container:release web --app your-production-app

  pentest-production:
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
    - name: Run AI-Driven API Pentesting on Production
      env:
        PENTEST_API_KEY: ${{ secrets.PENTEST_API_KEY }}
      run: |
        curl -X POST "https://api.aipentest.com/v1/scan" \
          -H "Authorization: Bearer $PENTEST_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "target_url": "https://your-production-app.herokuapp.com",
            "scan_type": "safe",
            "callback_url": "https://your-webhook-endpoint.com/pentest-results"
          }'
    - name: Wait for Pentest Results
      run: |
        # Implement waiting logic here
        sleep 300
    - name: Check Pentest Results
      run: |
        # Implement result checking logic here
        echo "Checking pentest results..."

  notify:
    needs: [pentest-staging, pentest-production]
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Deployment or pentesting failed! Check the logs for more details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}